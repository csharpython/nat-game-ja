msgid ""
msgstr "Project-Id-Version: Game v4.6.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Sat Apr  6 05:11:06 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: ja\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: Game.Levels.Tutorial.L01_HelloWorld
msgid "はじめの一歩"
msgstr ""

#: Game.Levels.Tutorial.L01_HelloWorld
msgid "## 説明\n"
"`X=X`といった形のゴールを閉じます。\n"
"これは、**定義として**等しい場合のみ有効です。\n"
"ただ、このゲームでは関数の値は「公理」として実装されていることが多いので、\n"
"基本的には左辺と右辺が**完全に**一致する場合のみ有効だと思います。\n"
"(ちなみに、公理は数学の前提的なもの)\n"
"## 補足情報\n"
"このゲームの`rfl`はオリジナルの`rfl`に比べて弱体化されています。\n"
"そうした理由はゲーム性を上げるためです。"
msgstr ""

#: Game.Levels.Tutorial.L01_HelloWorld
msgid "\n"
"# 最初に読むこと。\n"
"ここには役立つ情報がたくさん書いてあるはずです。\n"
"\n"
"このゲームでやるべきことはシンプル。\n"
"ゴールとして存在する式を証明することです。\n"
"...どうやるのかって？「タクティク」を使い、ゴールを変形したり、閉じたりします。\n"
"\n"
"## 新しいタクティク：`rfl`\n"
"このタクティクは$X = X$の形のゴールを閉じます。\n"
"このステージのゴールに使えそうですね！\n"
""
msgstr ""

#: Game.Levels.Tutorial.L01_HelloWorld
msgid "$x$と$y$が自然数なら、$33 * x + 24 * y = 33 * x + 24 * y$である。"
msgstr ""

#: Game.Levels.Tutorial.L01_HelloWorld
msgid "左辺と右辺が同じ時は、rflを使うとゴールを閉じれます。"
msgstr ""

#: Game.Levels.Tutorial.L01_HelloWorld
msgid "「$33 * x + 24 * y = 33 * x + 24 * y$である。だから$33 * x + 24 * y = 33 * x + 24 * y$なのだ。」\n"
"では済まない命題も結構あるのですが...まあそれの示し方は次のステージで話しましょう。\n"
"ちなみに、このゲームの`rfl`はオリジナルの`rfl`に比べて弱体化されています。\n"
"そうした理由はゲーム性を上げるためです。"
msgstr ""

#: Game.Levels.Tutorial.L02_ReWrite
msgid "Eq."
msgstr ""

#: Game.Levels.Tutorial.L02_ReWrite
msgid "## 説明\n"
"例えば、`X=Y`という形の仮定や定理`h`があった場合、rw[h]を使用することで、\n"
"ゴール内の**全ての**`X`が`Y`に置き換わります。\n"
"\n"
"## 変種\n"
"`rw[←h]` : `Y`が`X`になります。\n"
"\n"
"`rw[h1,h2]` : `rw[h1]`,`rw[h2]`を順番に実行します。\n"
"\n"
"`rw[h1,h2,h3]` : もちろん3つ以上の置き換えも可能です。\n"
"\n"
"`rw[h1] at h2` : **`h2`に対して**`rw[h1]`を実行します。\n"
"\n"
"もしかしたら、私が把握できていないだけで他にもあるかも知れません！\n"
"\n"
"## 補足情報\n"
"本来の`rw`は置き換え後に`rfl`を実行します。\n"
"そうしなかった理由は、もちろんゲーム性です。"
msgstr ""

#: Game.Levels.Tutorial.L02_ReWrite
msgid "\n"
"## 新しいタクティク：`rw`\n"
"\n"
"同じことを表すものってよくありますよね。\n"
"例えば、「力」と「パワー」や、「1の次の数」と「2」などがあります。\n"
"Lean4で同じことを表すものを置き換えるときは`rw`を使います。\n"
"こうすることで、「力」と「パワー」が「力」と「力」になるので、rflが使えます！\n"
""
msgstr ""

#: Game.Levels.Tutorial.L02_ReWrite
msgid "$e$と$mc$が自然数で、$e=mc ^ 2$なら$e=mc ^ 2$。"
msgstr ""

#: Game.Levels.Tutorial.L02_ReWrite
msgid "rw[h]を使おう。"
msgstr ""

#: Game.Levels.Tutorial.L02_ReWrite
msgid "イースターエッグ発見！ #1"
msgstr ""

#: Game.Levels.Tutorial.L02_ReWrite
msgid "いいですね！Lean4では、仮定として用意した等式だけでなく、\n"
"すでに分かったこと、「定理」(もしくは「補題」)を番う方法もあります！\n"
"詳細はLv4で！\n"
"\n"
"ちなみに、`rewrite`より強いTactic`rw`がありますが、\n"
"それを使わなかった理由はもちろん、ゲーム性を上げるためです。"
msgstr ""

#: Game.Levels.Tutorial.L03_etirWeR
msgid "逆走"
msgstr ""

#: Game.Levels.Tutorial.L03_etirWeR
msgid "(Lv2で見つけた人もいるかもしれませんが)\n"
"実は`h : X=Y`という仮定がある場合、\n"
"ゴールの`X`を`Y`に置き換えるだけでなく、\n"
"**`Y`を`X`に置き換えることもできます**\n"
"早速試してみましょう！\n"
""
msgstr ""

#: Game.Levels.Tutorial.L03_etirWeR
msgid "$x,y,z$が全て自然数で、$z=x$かつ$z=y$なら$x+y=z+z$。"
msgstr ""

#: Game.Levels.Tutorial.L03_etirWeR
msgid "`rw`のマニュアルは読みましたか？"
msgstr ""

#: Game.Levels.Tutorial.L03_etirWeR
msgid "イースターエッグ発見！ #2"
msgstr ""

#: Game.Levels.Tutorial.L03_etirWeR
msgid "イースターエッグ発見！ #2"
msgstr ""

#: Game.Levels.Tutorial.L03_etirWeR
msgid "このように、数学では\n"
"「逆から考える」というテクニックが有効なことがあります。\n"
"ゴールを閉じるために必要なことを考えると、\n"
"自ずと答えが見えてくるでしょう。\n"
""
msgstr ""

#: Game.Levels.Tutorial.L04_add_zero
msgid "参照"
msgstr ""

#: Game.Levels.Tutorial.L04_add_zero
msgid "\n"
"# 定理の使用\n"
"\n"
"Leanで使えるのは、仮定だけではありません。\n"
"すでに分かっていること「定理」も使えます！\n"
"\n"
"## 0は自然数か問題\n"
"このゲームでは、$0$は自然数であるとします。\n"
"そうした方が(このゲームでは)都合がいいからです。\n"
""
msgstr ""

#: Game.Levels.Tutorial.L04_add_zero
msgid "自然数の加算。\n"
"  add_zero `a + 0 = a` と、\n"
"  add_succ `a + MyNat.succ b = MyNat.succ (a + b)`\n"
"  で定義される。"
msgstr ""

#: Game.Levels.Tutorial.L04_add_zero
msgid "## 説明\n"
"aを自然数とする。a+0=aである。"
msgstr ""

#: Game.Levels.Tutorial.L04_add_zero
msgid "$∀{a,b,c}∈{ℕ ^ 3},a + (b + 0) + (c + 0) = a + b + c$"
msgstr ""

#: Game.Levels.Tutorial.L04_add_zero
msgid "`rw[add_zero]`で`b+0`が`b`になります。"
msgstr ""

#: Game.Levels.Tutorial.L04_add_zero
msgid "実は、`repeat (Tactic)`を使うと、\n"
"Tacticを失敗するまで繰り返してくれます。便利ですね\n"
""
msgstr ""

#: Game.Levels.Tutorial.L05_A1EqS
msgid "定理をつくろう(succ_eq_add_one)"
msgstr ""

#: Game.Levels.Tutorial.L05_A1EqS
msgid "\n"
"$a + (0でない適当な自然数)$ に関する定義も欲しいですよね？\n"
"作っておきました\n"
"\n"
"Leanでは、自分で定理を作って証明し、ほかの定理の証明に生かすといったことができます。\n"
"やってみましょう！\n"
""
msgstr ""

#: Game.Levels.Tutorial.L05_A1EqS
msgid "## 説明\n"
"$a,b$を自然数とする。$a + b' = (a + b)'$ である。"
msgstr ""

#: Game.Levels.Tutorial.L05_A1EqS
msgid "## 説明\n"
"1は0の次です。"
msgstr ""

#: Game.Levels.Tutorial.L05_A1EqS
msgid "## 説明\n"
"$a$が自然数なら、$a+1=a'$である。"
msgstr ""

#: Game.Levels.Tutorial.L05_A1EqS
msgid "$∀a∈ℕ,a+1=a'$"
msgstr ""

#: Game.Levels.Tutorial.L05_A1EqS
msgid "$1$の定義はなんでしたか？"
msgstr ""

#: Game.Levels.Tutorial.L05_A1EqS
msgid "\n"
"「定義から考える」というコツは意外と有用です。\n"
""
msgstr ""

#: Game.Levels.Tutorial.Boss_notauto
msgid "BOSS:定理をつかおう"
msgstr ""

#: Game.Levels.Tutorial.Boss_notauto
msgid "\n"
"(ボス戦の曲)\n"
"\n"
"先ほど証明した定理`add_one_eq_succ`を使ってみましょう。\n"
""
msgstr ""

#: Game.Levels.Tutorial.Boss_notauto
msgid "## 説明\n"
"2は1の次です。"
msgstr ""

#: Game.Levels.Tutorial.Boss_notauto
msgid "$1+1=2$"
msgstr ""

#: Game.Levels.Tutorial.Boss_notauto
msgid "\n"
"(ファンファーレのようなSE)\n"
"\n"
"右上にある`</>`のようなボタンを押してみてください。\n"
"「エディターモード」に切り替えられ、数行のコードが表示されるでしょう。\n"
"カーソルをどこかの行に動かすと、その時点でのゴールが表示されます。\n"
"コピペを使って証明を保存しておくこともできます！\n"
""
msgstr ""

#: Game.Levels.Tutorial
msgid "Tutorial"
msgstr ""

#: Game.Levels.Tutorial
msgid "\n"
"チュートリアルです。このワールドでLean4に慣れましょう。\n"
""
msgstr ""

#: Game.Levels.Add.L01_zero_add
msgid "数学的ドミノ倒し(Zero_add)"
msgstr ""

#: Game.Levels.Add.L01_zero_add
msgid "## 説明\n"
"数学的帰納法を使うために必要なタクティクです。\n"
"\n"
"## 構文\n"
"`induction X` Xについての帰納法を行います。\n"
"`induction X with Y Z` Xについての帰納法を行い、新たな変数Y、仮定Zを作り使います。"
msgstr ""

#: Game.Levels.Add.L01_zero_add
msgid "\n"
"## あらかじめ言っておきます。\n"
"**このゲームで和の定義として使われているのは\n"
"$a+0=a$と$(a + b')=(a + b)'$のみです。\n"
"$0+a=a$は定義として使われていません。**\n"
"\n"
"## 数学的帰納法\n"
"A. $n = 0$の時、P。\n"
"B. $n = k$の時にPなら、$n = k'$の時もP。\n"
"この2つが成り立つなら、nがどんな自然数であってもP。\n"
"このことを使う証明を、数学的帰納法といいます。\n"
"**自然数がかかわる問題では、かなり使いやすいです!**\n"
""
msgstr ""

#: Game.Levels.Add.L01_zero_add
msgid "## 説明\n"
"xを自然数とする。0+x=xである。"
msgstr ""

#: Game.Levels.Add.L01_zero_add
msgid "$∀x∈ℕ,0 + x = x$"
msgstr ""

#: Game.Levels.Add.L01_zero_add
msgid "`induction x`"
msgstr ""

#: Game.Levels.Add.L01_zero_add
msgid "\n"
"いいですね！\n"
""
msgstr ""

#: Game.Levels.Add.L02_succ_add
msgid "1+"
msgstr ""

#: Game.Levels.Add.L02_succ_add
msgid "\n"
"これは交換法則を証明するのに必要な奴です。\n"
"頑張ってください。\n"
"え、何でこれが必要なのかって？まあ、やってみればわかりますよ...\n"
""
msgstr ""

#: Game.Levels.Add.L02_succ_add
msgid "## 説明\n"
"x yを自然数とする。x'+y=(x+y)'である。"
msgstr ""

#: Game.Levels.Add.L02_succ_add
msgid "$∀{x,y}∈ℕ^2,x' + y = (x + y)'$"
msgstr ""

#: Game.Levels.Add.L02_succ_add
msgid "`induction y`"
msgstr ""

#: Game.Levels.Add.L02_succ_add
msgid "\n"
"いいですね！\n"
""
msgstr ""

#: Game.Levels.Add.L03_add_comm
msgid "Boss:交換法則(add_comm)"
msgstr ""

#: Game.Levels.Add.L03_add_comm
msgid "\n"
"[それっぽい音楽]\n"
"\n"
"交換法則を証明しましょう！頑張ってください！\n"
""
msgstr ""

#: Game.Levels.Add.L03_add_comm
msgid "## 説明\n"
"x yを自然数とする。x+y=y+xである。"
msgstr ""

#: Game.Levels.Add.L03_add_comm
msgid "$∀{x,y}∈ℕ^2,x + y = y + x$"
msgstr ""

#: Game.Levels.Add.L03_add_comm
msgid "どちらを選んでもいいです。とりあえずxについて帰納法しましょうか。"
msgstr ""

#: Game.Levels.Add.L03_add_comm
msgid "«{n_ih}» が使えるように、式を変形してみましょう。`succ_add`が使えるはずです。"
msgstr ""

#: Game.Levels.Add.L03_add_comm
msgid "\n"
"お疲れさまでした！このように、整数絡みの問題では帰納法が役立つことが多いです！\n"
"覚えておきましょう！\n"
""
msgstr ""

#: Game.Levels.Add.L04_add_assoc
msgid "結合法則(add_assoc)"
msgstr ""

#: Game.Levels.Add.L04_add_assoc
msgid "\n"
"$x+y+z$について話しましょう。\n"
"これは、$(x+y)+z$でしょうか？それとも、$x+(y+z)$でしょうか？\n"
"正解は、当然$(x+y)+z$です。+は左から計算するからね。\n"
"では$(x+y)+z$と$x+(y+z)$にはどのような関係があるのでしょうか？\n"
"それを調べてみましょう。\n"
""
msgstr ""

#: Game.Levels.Add.L04_add_assoc
msgid "## 説明\n"
"x yを自然数とする。x+y=y+xである。"
msgstr ""

#: Game.Levels.Add.L04_add_assoc
msgid "$∀{x,y,z}∈ℕ^3,x + y + z = x + (y + z)$"
msgstr ""

#: Game.Levels.Add.L04_add_assoc
msgid "たぶんzに対して帰納法するのが一番楽です。"
msgstr ""

#: Game.Levels.Add.L04_add_assoc
msgid "\n"
"私の回答を載せておきますね：\n"
"```\n"
"induction z\n"
"  repeat rw[add_zero]\n"
"  rfl\n"
"  rw[add_succ,add_succ,add_succ,n_ih]\n"
"  rfl\n"
"```\n"
""
msgstr ""

#: Game.Levels.Add
msgid "World +"
msgstr ""

#: Game.Levels.Add
msgid "\n"
"このワールドでは、「帰納法」というものを使います。\n"
"身構える必要はないですよ。\n"
"これはただの(ドミノが無限にある)(数学的な)ドミノ倒しですから。\n"
""
msgstr ""

#: Game
msgid "自然数ゲーム"
msgstr ""

#: Game
msgid "\n"
"こんにちは。自然数ゲームへようこそ。\n"
"このゲームは、Leanを使って様々な自然数の性質を証明します。\n"
"おっと、そんなに身構える必要はありませんよ。\n"
""
msgstr ""

#: Game
msgid "\n"
"Githubのリンク：https://github.com/csharpython/nat-game-ja\n"
"使ったテンプレート：https://github.com/hhu-adam/GameSkeleton\n"
"参考：https://github.com/leanprover-community/NNG4/\n"
"Lean jaのDiscord：https://discord.com/invite/p32ZfnVawh\n"
""
msgstr ""

#: Game
msgid "自然数ゲーム"
msgstr ""

#: Game
msgid "自然数の性質を証明してみましょう"
msgstr ""
